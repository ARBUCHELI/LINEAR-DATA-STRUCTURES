# QUEUES: PYTHON
----------------

* Queues Python Introduction
----------------------------
6 min
As previously mentioned, a queue is a data structure that contains an ordered set of data that follows a FIFO (first in, first out) protocol. You can visualize it as a line at a 
deli:

	. The customer at the front of the line (equivalent to the head in a queue) is the first customer to get served

	. Any new customer must go to the back of the line (the tail of the queue) and wait until everyone in front of them has been served (no line cutters allowed in this deli!)

	. The deli server only needs to know about the current order

Now, we can use Python to build out a Queue class with those three essential queue methods:

	. enqueue() which will allow us to add a new node to the tail of the queue

	. dequeue() which will allow us to remove a node from the head of the queue and return its value

	. peek() which will allow us to view the value of head of the queue without returning it

We’ll also set up a few helper methods that will help us keep track of the queue size in order to prevent queue “overflow” and “underflow.”

Ready, set, queue up!

* Instructions
--------------
Checkpoint 1 Passed
1.
Within queue.py in the pane to the right, create a Queue class with an __init__() method. Inside the method:

	. set an instance property head equal to None

	. set another instance property tail equal to None

Checkpoint 2 Passed

2.
Below __init__(), define another method peek() that returns the value of the stack’s head using the Node method get_value().

node.py
-------
class Node:
  def __init__(self, value, next_node=None):
    self.value = value
    self.next_node = next_node
    
  def set_next_node(self, next_node):
    self.next_node = next_node
    
  def get_next_node(self):
    return self.next_node
  
  def get_value(self):
    return self.value



queue.py
--------
from node import Node
# Create the Queue class below:
class Queue:
  def __init__(self):
    self.head = None
    self.tail = None
    
  def peek(self):
    return self.head.get_value()

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Queues Python Size
--------------------
16 min
Bounded queues require limits on the number of nodes that can be contained, while other queues don’t. To account for this, we will need to make some modifications to our Queue class so 
that we can keep track of and limit size where needed.

We’ll be adding two new properties to help us out here:

	. A size property to keep track of the queue’s current size

	. A max_size property that bounded queues can utilize to limit the total node count

In addition, we will add three new methods:

	. get_size() will return the value of the size property

	. has_space() will return True if the queue has space for another node

	. is_empty() will return true if the size is 0

* Instructions
--------------
Checkpoint 1 Passed
1.
Add a new parameter max_size to your __init__() method that has a default value of None. Inside the method:

	. create a max_size instance variable assigned to max_size

	. create another instance variable size and set it equal to 0
Checkpoint 2 Passed

2.
Inside Queue define a new method get_size() that returns the size instance property.

Checkpoint 3 Passed
3.
Below get_size(), define a new method called has_space().

Inside of has_space(), check the value of self.max_size.

	. If self.max_size is None, we will always have space in the queue, so we can return True

	. Otherwise, if there is a value in max_size, return True if max_size is greater than self.get_size()

You can check if max_size has not been set with this line:

if self.max_size == None:

Checkpoint 4 Passed
4.
Define another method is_empty for Queue. The method should return True if the queue is empty (if the size of the queue is 0).

Checkpoint 5 Passed
5.
Now we’ll make sure we aren’t attempting to peek() on an empty queue. After all, a deli server can’t get an order from a line with no customers!

At the top of your peek() method body, use is_empty() to see if the queue is empty.

	. if so, the method should just print “Nothing to see here!”

	. if not, peek() will perform the same as it did before

node.py
-------
class Node:
  def __init__(self, value, next_node=None):
    self.value = value
    self.next_node = next_node
    
  def set_next_node(self, next_node):
    self.next_node = next_node
    
  def get_next_node(self):
    return self.next_node
  
  def get_value(self):
    return self.value

queue.py
--------
from node import Node

class Queue:
  # Add max_size and size properties within __init__():
  def __init__(self, max_size=None):
    self.head = None
    self.tail = None
    self.max_size = max_size
    self.size = 0
    
  def peek(self):
    if self.is_empty():
      print("Nothing to see here!")
    else:
      return self.head.get_value()
  
  # Define get_size() and has_space() below:
  def get_size(self):
    return self.size

  def has_space(self):
    if self.max_size == None:
      return True
    else:
      return self.max_size > self.get_size()

  def is_empty(self):
    return self.size == 0

------------------------------------------------------------------------------------------------------------------------------------------------------------------









































































































