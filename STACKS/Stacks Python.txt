# STACKS: PYTHON
----------------

* Stacks Python Introduction
----------------------------
4 min
You have an understanding of how stacks work in theory, so now let’s see how they can be useful out in the wild — with Python!

Remember that there are three main methods that we want our stacks to have:

	. Push - adds data to the “top” of the stack

	. Pop - provides and removes data from the “top” of the stack

	. Peek - provides data from the “top” of the stack without removing it

We also need to consider the stack’s size and tweak our methods a bit so that our stack does not “overflow”.

Let’s get started building out our Stack class.

* Instructions
--------------
Checkpoint 1 Passed
1.
Within stack.py, create a Stack class.

Define an __init__() method for Stack. Inside the method, set an instance property top_item equal to None.


Hint
Setting a property in __init__() looks like:

def __init__(self):
  self.some_property = some_value

Checkpoint 2 Passed
2.
Below __init__(), define another method peek() that returns the value of the stack’s top_item using the Node method get_value().


Hint
You can tab over to node.py to see how the get_value() method works.

stack.py
--------
from node import Node

# Add your Stack class below:
class Stack:
  def __init__(self):
    self.top_item = None

  def peek(self):
    return self.top_item.get_value()

node.py
-------
class Node:
  def __init__(self, value, next_node=None):
    self.value = value
    self.next_node = next_node
    
  def set_next_node(self, next_node):
    self.next_node = next_node
    
  def get_next_node(self):
    return self.next_node
  
  def get_value(self):
    return self.value

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Stacks Python Push and Pop
----------------------------
8 min
The stack’s push() and pop() methods are our tools to add and remove items from it. pop() additionally returns the value of the item it is removing. Keep in mind that we can only make 
modifications to the top of the stack.

* Instructions
--------------
Checkpoint 1 Passed
1.
Below __init__(), define a method push() for Stack that takes the parameter value. Inside the method:

	. Instantiate a Node with value as an argument and assign it to the variable item (because this item is a node, we have easy access to Node’s class methods)

	. Set item‘s next node to the stack’s current top_item using the Node method set_next_node()

	. Set the stack instance’s top_item equal to the new item, adding it to the top of the stack

Hint
You can tab over to node.py to see Node‘s class methods and how they work.

Checkpoint 2 Passed
2.
Below push(), define a method pop() for Stack. Inside pop():

	. Create a variable item_to_remove and set it equal to the stack’s top_item

	. If we’re removing our stack’s top_item, we need to set a new top_item! Set the top_item equal to the node after item_to_remove

	. Return the value stored in item_to_remove

node.py
-------
class Node:
  def __init__(self, value, next_node=None):
    self.value = value
    self.next_node = next_node
    
  def set_next_node(self, next_node):
    self.next_node = next_node
    
  def get_next_node(self):
    return self.next_node
  
  def get_value(self):
    return self.value

stack.py
--------
from node import Node

class Stack:
  def __init__(self):
    self.top_item = None
  
  # Define your push() and pop() methods below:
  def push(self, value):
    item = Node(value)
    item.set_next_node(self.top_item)
    self.top_item = item
  
  def pop(self):
    item_to_remove = self.top_item
    self.top_item = item_to_remove.get_next_node()
    return item_to_remove.get_value()
  
  def peek(self):
    return self.top_item.get_value()

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Stacks Python Size I
----------------------
8 min
With stacks, size matters. If we’re not careful, we can accidentally over-fill them with data. Since we don’t want any stack overflow, we need to go back and make a few modifications to 
our methods that help us track and limit the stack size so we can keep our stacks healthy.

What do we do if someone tries to peek() or pop() when our stack is empty?

How do we keep someone from push()ing to a stack that has already reached its limit?

How do we even know how large our stack has gotten?

* Instructions
--------------
Checkpoint 1 Passed
1.
In __init__(), let’s add two new properties: size and limit.

limit should be accepted as a parameter with a default of 1000. Inside the method, set the instance limit property to the passed in value of limit.

size should be set to 0 in __init__().

Checkpoint 2 Passed
2.
In peek() and pop(), wrap the current body of each method in an if clause that checks if the size of the stack is greater than 0.

At the end of each method, outside the if clause, add an else clause with a print statement to let users know that the stack is empty.

Checkpoint 3 Passed
3.
In pop() just before the return statement, reduce the size of the stack by 1.

stack.py
--------
from node import Node

class Stack:
  def __init__(self, limit=1000):
    self.top_item = None
    self.limit = limit
    self.size = 0

  def push(self, value):
    item = Node(value)
    item.set_next_node(self.top_item)
    self.top_item = item

  def pop(self):
    if self.size > 0:
      item_to_remove = self.top_item
      self.top_item = item_to_remove.get_next_node()
    # Decrement the stack size here:
      self.size -= 1
      return item_to_remove.get_value()
  
  def peek(self):
    if self.size > 0:
      return self.top_item.get_value()

node.py
-------
class Node:
  def __init__(self, value, next_node=None):
    self.value = value
    self.next_node = next_node
    
  def set_next_node(self, next_node):
    self.next_node = next_node
    
  def get_next_node(self):
    return self.next_node
  
  def get_value(self):
    return self.value

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Stacks Python Size II
-----------------------
8 min
It’s time to add a couple helper methods.

Helper methods simplify the code we’ve written by abstracting and labeling chunks of code into a new function. Here’s an example:

# Adding "!" without a helper
saying = "I love helper methods"
exclamation = saying + "!"

# Adding "!" with a helper
def add_exclamation_to_string(str):
  return str + "!"

exclamation2 = add_exclamation_to_string("I love helper methods")

This might seem like a silly example, but think about the benefit of the add_exclamation_to_string() helper.

	1. The name tells us what this function does. Without a helper, we’d need to read the code to understand its meaning.

	2. The function lets us repeat this behavior. Without a helper, we’d need to keep rewriting the same code!

First, we want one that checks if our stack has room for more items. We can use this in .push() to guard against pushing items to our stack when it’s full.

Second, it’s helpful to have a method that checks if the stack is empty…

* Instructions
--------------
Checkpoint 1 Passed
1.
Define a new method .has_space() in Stack. The method should return True if self.limit is greater than self.size.

Checkpoint 2 Passed
2.
Go back to your .push() method — we need to make sure we’re keeping track of our stack size when we add new items. At the end of your method body, increment self.size by 1.

Checkpoint 3 Passed
3.
Now add an if clause at the top of .push() that checks if your stack has space (using your newly created helper method).

	. If there’s space, the rest of the body of the method should execute.

	. If there’s no space, we want to print a message letting users know that the stack is already full. Something like “All out of space!” should be good.

Checkpoint 4 Passed

4.
Finally, let’s define a new method .is_empty() in Stack.

The method should return True if the stack’s size is 0.

Anywhere we’ve written if self.size > 0: can now be replaced with if not self.is_empty().

stack.py
--------
from node import Node

class Stack:
  def __init__(self, limit=1000):
    self.top_item = None
    self.size = 0
    self.limit = limit
  
  def push(self, value):
    if self.has_space():
      item = Node(value)
      item.set_next_node(self.top_item)
      self.top_item = item
      # Increment stack size by 1 here:
      self.size += 1
    else:
      print("All out of space!")
    

  def pop(self):
    if not self.is_empty():
      item_to_remove = self.top_item
      self.top_item = item_to_remove.get_next_node()
      self.size -= 1
      return item_to_remove.get_value()
    else:
      print("This stack is totally empty.")
  
  def peek(self):
    if not self.is_empty():
	    return self.top_item.get_value()
    else:
      print("Nothing to see here!")
      
  # Define has_space() and is_empty() below:
  def has_space(self):
    if self.limit > self.size:
      return True;

  def is_empty(self):
    if self.size == 0:
      return True;

node.py
-------
class Node:
  def __init__(self, value, next_node=None):
    self.value = value
    self.next_node = next_node
    
  def set_next_node(self, next_node):
    self.next_node = next_node
    
  def get_next_node(self):
    return self.next_node
  
  def get_value(self):
    return self.value

------------------------------------------------------------------------------------------------------------------------------------------------------------------





































































